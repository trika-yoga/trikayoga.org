import mdLinks from "markdown-it-external-links";

import mdSup from "markdown-it-sup";
import mdContainer from "markdown-it-container";

import generateMeta from 'vitepress-pages/head'
import { createWriteStream } from 'node:fs'
import { resolve } from 'node:path'
import { SitemapStream } from 'sitemap'

const links = []

const meta = {
  title: "Trika yoga",
  description:
    "Open collection of yantras, mantras, sacred texts and hymns of Kashmir Shaivism",
  author: "davay42",
  tags: "trika, yoga, mantra, yantra, tantra, sacred texts, shiva sutra, shiva, shaiva, bhairava, sat cit ananda",
  icon: "img/sadvidya.svg",
  image: 'img/trishula.png',
  site: "trikayoga.org",
  url: "https://trikayoga.org/", //the end slash here is mandatory
  repo: "https://github.com/trika-yoga/trikayoga.org",
  locale: "en",
  color: '#eeee22',
  mediaFolder: 'media_files', //where are the media files generated by `vitepress-pages/media` located
  // add it if you use [umami](https://umami.is/) for stats
  umamiId: "c09fa9c3-0b8e-4cc0-a48c-ff778ca8f00e",
  umamiScript: "https://stat.defucc.me/script.js"
};

import { defineConfig } from "vitepress";
export default defineConfig({
  title: meta.title,
  description: meta.description,
  lang: meta.lang,
  transformHead: generateMeta(meta),
  themeConfig: {
    repo: "",
    logo: "/img/sadvidya.svg",
  },
  markdown: {
    config: (md) => {
      // md.use(mdClass);
      md.use(mdSup);
      md.use(mdContainer, "stanza", {
        render: function (tokens, idx) {
          var m = tokens[idx].info.trim().match(/^stanza\s+(.*)$/);

          if (tokens[idx].nesting === 1) {
            let text = md.utils.escapeHtml(m?.[1] || "");
            let tag = "";
            if (text)
              tag = `<a href="#s${text}" id="s${text}" class="num" >${text}</a>`;
            // opening tag
            return `<div class="stanza">${tag}
            `;
          } else {
            // closing tag
            return "</div>\n";
          }
        },
      });
      md.use(mdLinks, {
        internalDomains: ["localhost", "trikayoga.org"],
      });
    },
  },
  transformHtml: (_, id, { pageData }) => {
    if (!/[\\/]404\.html$/.test(id))
      links.push({
        // you might need to change this if not using clean urls mode
        url: pageData.relativePath?.replace(/((^|\/)index)?\.md$/, '$2'),
        lastmod: pageData?.lastUpdated,
        changefreq: 'weekly'
      })
  },
  buildEnd: async ({ outDir }) => {
    const sitemap = new SitemapStream({ hostname: meta.url })
    const writeStream = createWriteStream(resolve(outDir, 'sitemap.xml'))
    sitemap.pipe(writeStream)
    links.forEach((link) => sitemap.write(link))
    sitemap.end()
    await new Promise((r) => writeStream.on('finish', r))
  }
})